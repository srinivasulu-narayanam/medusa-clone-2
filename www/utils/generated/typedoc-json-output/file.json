{
	"id": 38598,
	"name": "file",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 38599,
			"name": "AbstractFileProviderService",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "### constructor\n\nThe constructor allows you to access resources from the module's container using the first parameter,\nand the module's options using the second parameter.\n\nIf you're creating a client or establishing a connection with a third-party service, do it in the constructor.\n\n#### Example\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nimport { Logger } from \"@srinivasulu-narayanam/framework/types\"\nimport { AbstractFileProviderService } from \"@srinivasulu-narayanam/framework/utils\"\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\ntype Options = {\n  apiKey: string\n}\n\nclass MyFileProviderService extends AbstractFileProviderService {\n  protected logger_: Logger\n  protected options_: Options\n  static identifier = \"my-file\"\n  // assuming you're initializing a client\n  protected client\n\n  constructor (\n    { logger }: InjectedDependencies,\n    options: Options\n  ) {\n    super()\n\n    this.logger_ = logger\n    this.options_ = options\n\n    // assuming you're initializing a client\n    this.client = new Client(options)\n  }\n}\n\nexport default MyFileProviderService\n```"
					}
				]
			},
			"children": [
				{
					"id": 38600,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Each file provider has a unique ID used to identify it. The provider's ID\nwill be stored as "
							},
							{
								"kind": "code",
								"text": "`fs_{identifier}_{id}`"
							},
							{
								"kind": "text",
								"text": ", where "
							},
							{
								"kind": "code",
								"text": "`{id}`"
							},
							{
								"kind": "text",
								"text": " is the provider's "
							},
							{
								"kind": "code",
								"text": "`id`"
							},
							{
								"kind": "text",
								"text": " \nproperty in the "
							},
							{
								"kind": "code",
								"text": "`medusa-config.ts`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nclass MyFileProviderService extends AbstractFileProviderService {\n  static identifier = \"my-file\"\n  // ...\n}\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38601,
					"name": "validateOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 38602,
							"name": "validateOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the options of the provider set in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ".\nImplementing this method is optional. It's useful if your provider requires custom validation.\n\nIf the options aren't valid, throw an error."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFileProviderService extends AbstractFileProviderService {\n  static validateOptions(options: Record<any, any>) {\n    if (!options.apiKey) {\n      throw new MedusaError(\n        MedusaError.Types.INVALID_DATA,\n        \"API key is required in the provider's options.\"\n      )\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38603,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The provider's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 38604,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 38605,
							"name": "AbstractFileProviderService",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 38599,
								"name": "AbstractFileProviderService",
								"package": "@srinivasulu-narayanam/utils"
							}
						}
					]
				},
				{
					"id": 38608,
					"name": "upload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38609,
							"name": "upload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method uploads a file using your provider's custom logic."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The uploaded file's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFileProviderService extends AbstractFileProviderService {\n  // ...\n  async upload(\n    file: ProviderUploadFileDTO\n  ): Promise<ProviderFileResultDTO> {\n    // TODO upload file to third-party provider\n    // or using custom logic\n\n    return {\n      url: \"some-url.com\",\n      key: \"file-name\"\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38610,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file to upload"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/file/provider.ts",
											"qualifiedName": "ProviderUploadFileDTO"
										},
										"name": "ProviderUploadFileDTO",
										"package": "@srinivasulu-narayanam/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/file/provider.ts",
											"qualifiedName": "ProviderFileResultDTO"
										},
										"name": "ProviderFileResultDTO",
										"package": "@srinivasulu-narayanam/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFileProvider.upload"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFileProvider.upload"
					}
				},
				{
					"id": 38611,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38612,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method deletes the file from storage."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the file is deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFileProviderService extends AbstractFileProviderService {\n  // ...\n  async delete(file: ProviderDeleteFileDTO): Promise<void> {\n    // TODO logic to remove the file from storage\n    // Use the `file.fileKey` to delete the file\n    // for example:\n    this.client.delete(file.fileKey)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38613,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/file/provider.ts",
											"qualifiedName": "ProviderDeleteFileDTO"
										},
										"name": "ProviderDeleteFileDTO",
										"package": "@srinivasulu-narayanam/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFileProvider.delete"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFileProvider.delete"
					}
				},
				{
					"id": 38614,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38615,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a download URL of the file. For some providers,\nsuch as S3, a presigned URL indicates a temporary URL to get access to a file.\n\nIf your provider doesn’t perform or offer a similar functionality, you can\nreturn the URL to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The file's presigned URL."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFileProviderService extends AbstractFileProviderService {\n  // ...\n  async getPresignedDownloadUrl(\n    fileData: ProviderGetFileDTO\n  ): Promise<string> {\n    // TODO logic to get the presigned URL\n    // Use the `file.fileKey` to delete the file\n    // for example:\n    return this.client.getPresignedUrl(fileData.fileKey)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38616,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file to get its\npresigned URL."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/file/provider.ts",
											"qualifiedName": "ProviderGetFileDTO"
										},
										"name": "ProviderGetFileDTO",
										"package": "@srinivasulu-narayanam/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFileProvider.getPresignedDownloadUrl"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFileProvider.getPresignedDownloadUrl"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						38604
					]
				},
				{
					"title": "Properties",
					"children": [
						38600
					]
				},
				{
					"title": "Methods",
					"children": [
						38601,
						38608,
						38611,
						38614
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/file/provider.ts",
						"qualifiedName": "IFileProvider"
					},
					"name": "IFileProvider",
					"package": "@srinivasulu-narayanam/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				38599
			]
		}
	],
	"packageName": "@srinivasulu-narayanam/utils",
	"symbolIdMap": {
		"38598": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": ""
		},
		"38599": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService"
		},
		"38600": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.identifier"
		},
		"38601": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.validateOptions"
		},
		"38602": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.validateOptions"
		},
		"38603": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "options"
		},
		"38608": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.upload"
		},
		"38609": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.upload"
		},
		"38610": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "file"
		},
		"38611": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.delete"
		},
		"38612": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.delete"
		},
		"38613": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "file"
		},
		"38614": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.getPresignedDownloadUrl"
		},
		"38615": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "AbstractFileProviderService.getPresignedDownloadUrl"
		},
		"38616": {
			"sourceFileName": "../../../../packages/core/utils/src/file/abstract-file-provider.ts",
			"qualifiedName": "fileData"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/file/abstract-file-provider.ts"
		},
		"reflections": {
			"1": 38598
		}
	}
}
